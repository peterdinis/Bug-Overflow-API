type Technology {
    id: ID!
    name: String!
    image: String!
}

type User {
    id: ID!
    userName: String!
    email: String!
    token: String!
    favoriteTechnologies: [Technology!]!
    createdAt: String!
    posts: [Post!]!
}

type Post {
    id: ID!
    content: String!
    createdAt: String!
    user: User!
    tag: String!
    comments: [Comment!]!
}

type Comment {
    id: ID!
    createdAt: String!
    commentedText: String!
    post: Post!
    user: User!
}

input CreateTechnology {
    name: String!
    image: String!
}

input CreatePostInput {
    content: String!
    user: String!
    tag: String!
}

input UpdatePostInput {
    content: String
    user: String
    tag: String
}

input updateTechnology {
    name: String
    image: String
}

input AuthInput {
    userName: String!
    email: String!
    password: String!
}

type Query {
    getAllTechnologies: [Technology!]!
    paginatedTechnologies(page: Int!, pageSize: Int!): [Technology!]!
    searchTechnologies(name: String!): Technology!
    getTechnologyById(id: ID!): Technology
    userProfile(id: ID!): User!
    getAllPosts: [Post!]!
    getPostById(id: ID!): Post!
    paginatedPosts(page: Int, pageSize: Int): [Post!]!
    searchPosts(query: String!): [Post!]!
}

type Mutation {
    createTechnology(createNewTechnology: CreateTechnology!): Technology!
    updateTechnology(id: ID!, updateTechnology: UpdateTechnology!): Technology
    deleteTechnology(id: ID!): ID
    registerUser(createNewUser: AuthInput!): User!
    loginUser(loginNewUser: AuthInput!): User!
    createPost(createPostInput: CreatePostInput!): Post!
    updatePost(updatePostInput: UpdatePostInput): Post
    deletePost(id: ID!): ID
    createComment(createCommentInput: CreateComment!): Comment!
    updateComment(updateCommentInput: UpdateComment): Comment!
    upvoteComment(upvoteCommentInput: UpvoteComment!): Comment!
    downvoteComment(downvoteCommentInput: DownvoteComment!): Comment!
    deleteComment(id: ID!): ID
}
